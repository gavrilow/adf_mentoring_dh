{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-dh"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DB_MoviesT_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_Movies_Parametrizated')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string",
						"defaultValue": "test"
					},
					"schema_name": {
						"type": "string",
						"defaultValue": "test"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceRatingsDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ratings"
					},
					"columnDelimiter": ",",
					"encodingName": "UTF-8",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlMoviesTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "test"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerCinemaTickets",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "test"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"encodingName": "UTF-8",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob2DL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMddHHmmss'), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T19:13:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BrandPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMddHHmmss'), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DLStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T19:13:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesDynamicDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BlobStorage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "BlobStorage",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DLStorageWithParameter",
											"type": "DatasetReference",
											"parameters": {
												"file_name": "@concat(replace(item().name,'.csv',''),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.csv')"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T20:52:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DL2MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Ratings",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Credits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "rating*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.ratings",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DLStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlMoviesTables",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "ratings"
								}
							}
						]
					},
					{
						"name": "Copy Movies Metadata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.movies_metadata",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DLStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlMoviesTables",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "movies_metadata"
								}
							}
						]
					},
					{
						"name": "Copy Credits",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Movies Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.credits",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DLStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlMoviesTables",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "credits"
								}
							}
						]
					},
					{
						"name": "Populate Cast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Credits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Movies Cast Map",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Cast",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Populate Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populatet Ratings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Ratings",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Populate Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Movie Status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Movies Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Movies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Movie Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Company",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Movies Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Movies Company Map",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Populate Company",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Genre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Movies Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Movies Genre Map",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Genre",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Populate Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T21:42:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlMoviesTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DL2MoviesDBOnline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DL to OnlinePurchase",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.online_purchase",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DLStorageJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlMoviesTables",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "online_purchase"
								}
							}
						]
					},
					{
						"name": "Populate Online Service",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DL to OnlinePurchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Online Purchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Online Service",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T21:42:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlMoviesTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyOnline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Blob to DL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Old Water Mark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@activity('Old Water Mark').output.firstRow.oldWatermarkValue",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hg0",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_hg0",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Write Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Blob to DL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@addhours(pipeline().TriggerTime, -3)",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"SourceName": {
									"value": "azurementoringstorageok/online",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerCinemaTickets",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Old Water Mark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(WatermarkValue) as oldWatermarkValue \nfrom dbo.watermarktable \nwhere SourceName = 'azurementoringstorageok/online' \ngroup by SourceName ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTableTickets",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "watermarktable"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-07T17:12:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Old Water Mark Activity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(WatermarkValue) as oldWatermarkValue \nfrom dbo.watermarktable \nwhere SourceName = 'dbo.Tickets' \ngroup by SourceName ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTableTickets",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "watermarktable"
								}
							}
						}
					},
					{
						"name": "Lookup New Water Mark Activity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(TransactionDt) as newWatermarkValue \nfrom dbo.Tickets ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTableTickets",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Tickets"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Old Water Mark Activity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup New Water Mark Activity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * \nfrom dbo.Tickets \nwhere TransactionDt > '@{activity('Lookup Old Water Mark Activity').output.firstRow.oldWatermarkValue}' \n\t  and TransactionDt <= '@{activity('Lookup New Water Mark Activity').output.firstRow.newWatermarkValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.cinema_tickets",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableTickets",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Tickets"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlMoviesTables",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "cinema_tickets"
								}
							}
						]
					},
					{
						"name": "Write Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Cinema Tickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('Lookup New Water Mark Activity').output.firstRow.newWatermarkValue",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"SourceName": {
									"value": "dbo.Tickets",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerCinemaTickets",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Cinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Cinema Tickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Cinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T21:42:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTickets')]",
				"[concat(variables('factoryId'), '/datasets/SqlMoviesTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module04')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMddHHmmss'), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceRatingsDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkRatingsDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T16:26:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceRatingsDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module0502')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Filename').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy csv to DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DLStorageWithParameter",
											"type": "DatasetReference",
											"parameters": {
												"file_name": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlMoviesTables",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@if(equals(substring(item().name,0,12),'ratings_part'),substring(item().name,0,sub(length(item().name),25)),substring(item().name,0,sub(length(item().name),19)))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Filename",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate Credits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DLStorage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Truncate Credits",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "TRUNCATE TABLE stg.credits\nSELECT 1 go\nTRUNCATE TABLE stg.movies_metadata\nSELECT 1 go\nTRUNCATE TABLE stg.ratings\nSELECT 1 go",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlMoviesTables",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "credits"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T21:42:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlMoviesTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module0906')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetProperties",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetProperties').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "PopulateDB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												},
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().folder_name",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().file_name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE ', item().schema_table)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().DIU",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(string(item().mapping))",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DLStorageParametrizated",
											"type": "DatasetReference",
											"parameters": {
												"column_delimiter": "@item().column_delimiter",
												"row_delimiter": {
													"value": "@item().row_delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DB_Movies_Parametrizated",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().destination_table",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().schema_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "spPopulatePipelineInfoAndStats",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "PopulateDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spPopulatePipelineInfoAndStats]",
										"storedProcedureParameters": {
											"copied_rows": {
												"value": {
													"value": "@activity('PopulateDB').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"parallel_copies": {
												"value": {
													"value": "@activity('PopulateDB').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_guid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"activity_name": {
												"value": "PopulateDB",
												"type": "String"
											},
											"processed_files": {
												"value": {
													"value": "@activity('PopulateDB').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"read_rows": {
												"value": {
													"value": "@activity('PopulateDB').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"used_DIU": {
												"value": {
													"value": "@activity('PopulateDB').output.usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"activity": {
												"value": "Copy data",
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"activity_guid": {
												"value": {
													"value": "@activity('PopulateDB').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "spPopulateExecutionDetails",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "spPopulatePipelineInfoAndStats",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spPopulateExecutionDetails]",
										"storedProcedureParameters": {
											"activity_guid": {
												"value": {
													"value": "@activity('PopulateDB').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"copy_duration": {
												"value": {
													"value": "@activity('PopulateDB').output.executionDetails[0].duration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@addToTime(activity('PopulateDB').output.executionDetails[0].start, activity('PopulateDB').output.executionDetails[0].duration, 'Second')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"queue_duration": {
												"value": {
													"value": "@activity('PopulateDB').output.executionDetails[0].profile.queue.duration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"start_time": {
												"value": {
													"value": "@activity('PopulateDB').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": {
													"value": "@activity('PopulateDB').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"transfer_duration": {
												"value": {
													"value": "@activity('PopulateDB').output.executionDetails[0].profile.transfer.duration",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "spBillingInfo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "spPopulatePipelineInfoAndStats",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spBillingInfo]",
										"storedProcedureParameters": {
											"activity_guid": {
												"value": {
													"value": "@activity('PopulateDB').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"duration": {
												"value": {
													"value": "@activity('PopulateDB').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"meter_type": {
												"value": {
													"value": "@activity('PopulateDB').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"unit": {
												"value": {
													"value": "@activity('PopulateDB').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ErrorHandler_PopulateDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "PopulateDB",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spPopulateErrorHandlerAndPipelineInfo]",
										"storedProcedureParameters": {
											"activity": {
												"value": "Copy data",
												"type": "String"
											},
											"activity_guid": {
												"value": {
													"value": "@activity('PopulateDB').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"activity_name": {
												"value": "PopulateDB",
												"type": "String"
											},
											"datetime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_code": {
												"value": {
													"value": "@activity('PopulateDB').error.errorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_message": {
												"value": {
													"value": "@activity('PopulateDB').error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('PopulateDB').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_guid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ErrorHandler_spPopulatePipelineInfoAndStats",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "spPopulatePipelineInfoAndStats",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spPopulateErrorHandlerAndPipelineInfo]",
										"storedProcedureParameters": {
											"activity": {
												"value": "Stored procedure",
												"type": "String"
											},
											"activity_guid": {
												"value": {
													"value": "@activity('spPopulatePipelineInfoAndStats').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"activity_name": {
												"value": "spPopulatePipelineInfoAndStats",
												"type": "String"
											},
											"datetime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_code": {
												"value": {
													"value": "@activity('spPopulatePipelineInfoAndStats').error.errorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_message": {
												"value": {
													"value": "@activity('spPopulatePipelineInfoAndStats').error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('spPopulatePipelineInfoAndStats').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_guid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ErrorHandler_spPopulateExecutionDetails",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "spPopulateExecutionDetails",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spPopulateErrorHandlerAndPipelineInfo]",
										"storedProcedureParameters": {
											"activity": {
												"value": "Stored procedure",
												"type": "String"
											},
											"activity_guid": {
												"value": {
													"value": "@activity('spPopulateExecutionDetails').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"activity_name": {
												"value": "spPopulateExecutionDetails",
												"type": "String"
											},
											"datetime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_code": {
												"value": {
													"value": "@activity('spPopulateExecutionDetails').error.errorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_message": {
												"value": {
													"value": "@activity('spPopulateExecutionDetails').error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('spPopulateExecutionDetails').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_guid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ErrorHandler_spBillingInfo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "spBillingInfo",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[spPopulateErrorHandlerAndPipelineInfo]",
										"storedProcedureParameters": {
											"activity": {
												"value": "Stored procedure",
												"type": "String"
											},
											"activity_guid": {
												"value": {
													"value": "@activity('spBillingInfo').ActivityRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"activity_name": {
												"value": "spBillingInfo",
												"type": "String"
											},
											"datetime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_code": {
												"value": {
													"value": "@activity('spBillingInfo').error.errorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_message": {
												"value": {
													"value": "@activity('spBillingInfo').error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('spBillingInfo').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_guid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetProperties",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT file_name,\n      container_name,\n      folder_name,\n      destination_table,\n      schema_name,\n      column_delimiter,\nrow_delimiter,\n      DIU,\nmapping,\n\t  CONCAT(schema_name,'.',destination_table) as schema_table\t  \n  FROM etl.tControlMetadata\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DB_Movies_Parametrizated",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "tControlMetadata",
									"schema_name": "etl"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ErrorHandler_GetProperties",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetProperties",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[spPopulateErrorHandlerAndPipelineInfo]",
							"storedProcedureParameters": {
								"activity": {
									"value": "Lookup",
									"type": "String"
								},
								"activity_guid": {
									"value": {
										"value": "@activity('GetProperties').ActivityRunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"activity_name": {
									"value": "GetProperties",
									"type": "String"
								},
								"datetime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"error_code": {
									"value": {
										"value": "@activity('GetProperties').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"error_message": {
									"value": {
										"value": "@activity('GetProperties').error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"failure_type": {
									"value": {
										"value": "@activity('GetProperties').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_guid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Test": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-12T22:12:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DB_Movies_Parametrizated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module1004')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetProperties",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT file_name1,\n      container_name,\n      folder_name,\n      destination_table,\n      schema_name,\n      column_delimiter,\nrow_delimiter,\n      DIU,\nmapping,\n\t  CONCAT(schema_name,'.',destination_table) as schema_table\t  \n  FROM etl.tControlMetadata\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DB_Movies_Parametrizated",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "tControlMetadata",
									"schema_name": "etl"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Test": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T20:49:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DB_Movies_Parametrizated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMddHHmmss'), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-20T07:29:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateDimTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DB_MoviesT_tMovies",
								"type": "DatasetReference"
							},
							"name": "TMovies"
						},
						{
							"dataset": {
								"referenceName": "DB_MoviesT_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "TMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DB_MoviesT_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "TOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DB_DataMartT_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovieSrc",
							"description": "Import data from DB_DataMartT_DimMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DB_DataMartT_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DB_DataMartT_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "join"
						},
						{
							"name": "AddCurrentDateTime1",
							"description": "Creating CurrentDateTime column"
						},
						{
							"name": "AddCurrentDateTime2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: true,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TMovieStatus",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '  SELECT MovieIdNK, CreatedDate\\n  FROM [dbo].[DimMovie]',",
						"     format: 'query') ~> DimMovieSrc",
						"join1, TMovieStatus join(TMovies@MovieStatusId == TMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"join derive(CurrentDateTime = currentTimestamp(),",
						"          CreateDate = coalesce(DimMovieSrc@CreatedDate, currentTimestamp())) ~> AddCurrentDateTime1",
						"TOnlineService derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> AddCurrentDateTime2",
						"AddCurrentDateTime1 alterRow(updateIf(TMovies@MovieIdNK==DimMovieSrc@MovieIdNK),",
						"     insertIf(isNull(DimMovieSrc@MovieIdNK))) ~> AlterRow1",
						"TMovies, DimMovieSrc join(TMovies@MovieIdNK == DimMovieSrc@MovieIdNK,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['MovieIdNK'],",
						"     format: 'table',",
						"     dateFormat:'yyyy-MM-dd',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK = TMovies@MovieIdNK,",
						"          Title = TMovies@Title,",
						"          ReleaseDate = TMovies@ReleaseDate,",
						"          Runtime = TMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate = CreateDate,",
						"          ModifiedDate = CurrentDateTime",
						"     )) ~> DimMovie",
						"AddCurrentDateTime2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DB_MoviesT_tOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateFactTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DB_MoviesT_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DB_MoviesT_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DB_DataMartT_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DB_DataMartT_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DB_MoviesT_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DB_DataMartT_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DB_DataMartT_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "OnlineServiceKey"
						},
						{
							"name": "JoinService"
						},
						{
							"name": "MovieId"
						},
						{
							"name": "JoinMovies"
						},
						{
							"name": "DateKey"
						},
						{
							"name": "MonthKey"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select ServiceId, ServiceCode from dbo.tOnlineService',",
						"     format: 'query') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select ServiceKey, ServiceCode from dbo.DimOnlineService',",
						"     format: 'query') ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MovieId, MovieIdNK\\nFROM [dbo].[tMovies]\\nGroup by MovieId, MovieIdNK',",
						"     format: 'query') ~> tMovies",
						"tOnlineService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OnlineServiceKey",
						"tOnlinePurchase, OnlineServiceKey join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinService",
						"tMovies, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> MovieId",
						"JoinService, MovieId join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMovies",
						"JoinMovies derive(DateKey = toInteger(replace(toString(toDate(TransactionDate)),'-',''))) ~> DateKey",
						"JoinMovies derive(MonthKey = toInteger(replace(substringIndex(toString(TransactionDate), '-', 2), '-', ''))) ~> MonthKey",
						"MonthKey aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> aggregate1",
						"DateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DB_MoviesT_tOnlineService')]"
			]
		}
	]
}